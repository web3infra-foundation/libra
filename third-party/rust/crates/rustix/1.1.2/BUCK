# @generated by `cargo buckal`

load("@buckal//:cargo_manifest.bzl", "cargo_manifest")
load("@buckal//:wrapper.bzl", "buildscript_run", "rust_binary", "rust_library")

http_archive(
    name = "rustix-vendor",
    urls = ["https://static.crates.io/crates/rustix/rustix-1.1.2.crate"],
    sha256 = "cd15f8a2c5551a84d56efdc1cd049089e409ac19a3072d5037a17fd70719ff3e",
    type = "tar.gz",
    strip_prefix = "rustix-1.1.2",
    out = "vendor",
)

cargo_manifest(
    name = "rustix-manifest",
    vendor = ":rustix-vendor",
)

rust_library(
    name = "rustix",
    srcs = [":rustix-vendor"],
    crate = "rustix",
    crate_root = "vendor/src/lib.rs",
    edition = "2021",
    env = {
        "OUT_DIR": "$(location :rustix-build-script-run[out_dir])",
    },
    features = [
        "alloc",
        "default",
        "fs",
        "std",
    ],
    rustc_flags = [
        "@$(location :rustix-build-script-run[rustc_flags])",
        "@$(location :rustix-manifest[env_flags])",
    ],
    named_deps = {
        "libc_errno": "//third-party/rust/crates/errno/0.3.14:errno",
    },
    visibility = ["PUBLIC"],
    deps = [
        "//third-party/rust/crates/bitflags/2.9.4:bitflags",
        "//third-party/rust/crates/libc/0.2.175:libc",
        "//third-party/rust/crates/linux-raw-sys/0.11.0:linux-raw-sys",
    ],
)

rust_binary(
    name = "rustix-build-script-build",
    srcs = [":rustix-vendor"],
    crate = "build_script_build",
    crate_root = "vendor/build.rs",
    edition = "2021",
    features = [
        "alloc",
        "default",
        "fs",
        "std",
    ],
    rustc_flags = ["@$(location :rustix-manifest[env_flags])"],
    visibility = [],
)

buildscript_run(
    name = "rustix-build-script-run",
    package_name = "rustix",
    buildscript_rule = ":rustix-build-script-build",
    env_srcs = [":rustix-manifest[env_dict]"],
    features = [
        "alloc",
        "default",
        "fs",
        "std",
    ],
    version = "1.1.2",
    manifest_dir = ":rustix-vendor",
    visibility = ["PUBLIC"],
)
